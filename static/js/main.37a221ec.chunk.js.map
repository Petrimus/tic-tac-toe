{"version":3,"sources":["gameUtility.js","styles/StyledGrid.js","styles/StyledSquare.js","components/Square.js","components/Stage.js","styles/StyledDisplay.js","components/Display.js","styles/GameWrapper.js","components/Game.js","hooks/useStage.js","index.js"],"names":["initialize","Array","fill","StyledGrid","styled","div","StyledSquare","props","color","Square","cell","handlePlayerChoice","pos","winner","onClick","undefined","Stage","stage","map","index","key","StyledDisplay","DisplayText","p","Button","button","visibility","Display","isOn","reset","playText","GameWrapper","Game","useState","setStage","setWinner","checkWinner","prev","i","combos","length","one","two","three","equals","availlableMoves","availlable","push","a","b","c","aiSelect","ii","possMoves","Math","floor","random","prevStage","aiStage","useStage","updateStage","setIsOn","console","log","ReactDOM","render","document","getElementById"],"mappings":"sOACaA,EAAa,kBAAM,IAAIC,MAAM,GAAGC,KAAK,CAAC,GAAI,W,ySCChD,IAAMC,EAAaC,IAAOC,IAAV,K,ygBCAhB,IAAMC,EAAeF,IAAOC,IAAV,KAUd,SAAAE,GAAK,OAAIA,EAAMC,SCOXC,EAdA,SAACF,GAAW,IACjBG,EAA0CH,EAA1CG,KAAMC,EAAoCJ,EAApCI,mBAAoBC,EAAgBL,EAAhBK,IAAKC,EAAWN,EAAXM,OAGvC,OACE,kBAACP,EAAD,CACEQ,QAAoB,IAAXD,OAAeE,EAAYJ,EAAmBC,GACvDJ,MAAOE,EAAK,IAEXA,EAAK,KCYGM,EAlBD,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAON,EAAiC,EAAjCA,mBAAoBE,EAAa,EAAbA,OAE1C,OACE,kBAACV,EAAD,KAEIc,EAAMC,KAAI,SAACR,EAAMS,GAAP,OACN,kBAAC,EAAD,CACEC,IAAKD,EACLP,IAAKO,EACLT,KAAMA,EACNC,mBAAoBA,EACpBE,OAAQA,S,wtBChBf,IAAMQ,EAAgBjB,IAAOC,IAAV,KAObiB,EAAclB,IAAOmB,EAAV,KAKXC,EAASpB,IAAOqB,OAAV,KACH,SAAAlB,GAAK,OAAIA,EAAMmB,cCqBhBC,EAjCC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMf,EAAoB,EAApBA,OAAQgB,EAAY,EAAZA,MAG3BC,EAAW,GAiBf,OAhBIF,EACa,IAAXf,EACFiB,EAAW,kBAACR,EAAD,kBAEI,IAAXT,EACFiB,EAAW,kBAACR,EAAD,kBACS,IAAXT,EACTiB,EAAW,kBAACR,EAAD,uBACS,IAAXT,IACViB,EAAW,kBAACR,EAAD,iBAIdQ,EAAW,kBAACR,EAAD,yBAIX,kBAACD,EAAD,KACGS,EACD,kBAACN,EAAD,CACAE,WAAwB,IAAXb,EAAe,SAAW,YACvCC,QAASe,KAFT,iB,gTCzBN,IAaeE,EAbK3B,IAAOC,IAAV,KCoCF2B,EA7BF,WAAO,IAAD,ECLK,WAAO,IAAD,EACFC,mBAASjC,KADP,mBACrBiB,EADqB,KACdiB,EADc,OAEAD,mBAAS,GAFT,mBAErBpB,EAFqB,KAEbsB,EAFa,KAkCtBC,EAAc,SAACC,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAOC,OAAQF,IAAK,CAAC,IAAD,cAEZC,EAAOD,GAFK,GAE/BG,EAF+B,KAE1BC,EAF0B,KAErBC,EAFqB,KAItC,GAAIC,EAAOP,EAAKI,GAAK,GAAIJ,EAAKK,GAAK,GAAIL,EAAKM,GAAO,IAOjD,OAJAN,EAAKI,GAAK,GAAK,MACfJ,EAAKK,GAAK,GAAK,MACfL,EAAKM,GAAO,GAAK,OAEV,IAKPE,EAAkB,SAAC5B,GAEvB,IADA,IAAI6B,EAAa,GACRR,EAAI,EAAGA,EAAIrB,EAAMuB,OAAQF,IACZ,KAAhBrB,EAAMqB,GAAG,IACXQ,EAAWC,KAAKT,GAGpB,OAAOQ,GAGHF,EAAS,SAACI,EAAGC,EAAGC,GAEpB,GAAU,KAANF,GAAkB,KAANC,GAAkB,KAANC,GACtBF,IAAMC,GAAKA,IAAMC,EACnB,OAAO,GAKPC,EAAW,SAACd,GAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAOC,OAAQF,IAAK,CAAC,IAAD,cACZC,EAAOD,GADK,GAC/BG,EAD+B,KAC1BC,EAD0B,KACrBC,EADqB,KAGtC,IAAqB,KAAjBN,EAAKI,GAAK,IAA8B,KAAjBJ,EAAKK,GAAK,IAAgC,KAAnBL,EAAKM,GAAO,MACtC,MAAjBN,EAAKI,GAAK,IAA+B,MAAjBJ,EAAKK,GAAK,IACnB,MAAjBL,EAAKI,GAAK,IAAiC,MAAnBJ,EAAKM,GAAO,IACnB,MAAjBN,EAAKK,GAAK,IAAiC,MAAnBL,EAAKM,GAAO,IAGrC,IAAK,IAAIS,EAAK,EAAGA,EAAKb,EAAOD,GAAGE,OAAQY,IAAM,CAC5C,IAAMjC,EAAQoB,EAAOD,GAAGc,GACxB,GAAuB,KAAnBf,EAAKlB,GAAO,GAEd,OADAkB,EAAKlB,GAAS,CAAC,IAAK,SACbkB,GAOjB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAOC,OAAQF,IAAK,CAAC,IAAD,cACZC,EAAOD,GADK,GAC/BG,EAD+B,KAC1BC,EAD0B,KACrBC,EADqB,KAGtC,IAAqB,KAAjBN,EAAKI,GAAK,IAA8B,KAAjBJ,EAAKK,GAAK,IAAgC,KAAnBL,EAAKM,GAAO,MACtC,MAAjBN,EAAKI,GAAK,IAA+B,MAAjBJ,EAAKK,GAAK,IACnB,MAAjBL,EAAKI,GAAK,IAAiC,MAAnBJ,EAAKM,GAAO,IACnB,MAAjBN,EAAKK,GAAK,IAAiC,MAAnBL,EAAKM,GAAO,IAErC,IAAK,IAAIS,EAAK,EAAGA,EAAKb,EAAOD,GAAGE,OAAQY,IAAM,CAC5C,IAAMjC,EAAQoB,EAAOD,GAAGc,GACxB,GAAuB,KAAnBf,EAAKlB,GAAO,GAEd,OADAkB,EAAKlB,GAAS,CAAC,IAAK,SACbkB,GAOjB,IAAMgB,EAAYR,EAAgBR,GAKlC,OAFAA,EAAKgB,EAFSC,KAAKC,MAAMD,KAAKE,SAAWH,EAAUb,UAE1B,CAAC,IAAK,SAExBH,GAGHE,EAAS,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,MAAO,CAACtB,EA9HY,SAACL,GAEnB,IAAI6C,EAAS,YAAOxC,GAQpB,GANAwC,EAAU7C,GAAO,CAAC,IAAK,SAEmB,IAAtCiC,EAAgBY,GAAWjB,QAC7BL,EAAU,GAGRC,EAAYqB,GAGd,OAFAtB,EAAU,QACVD,EAASuB,GAIX,IAAMC,EAAUP,EAASM,GAErBrB,EAAYsB,IACdvB,EAAU,GAGZD,EAASwB,IAwGiB7C,EArGd,kBAAM,WAClBqB,EAASlC,KACTmC,EAAU,MDzBgCwB,GAD3B,mBACV1C,EADU,KACH2C,EADG,KACU/C,EADV,KACkBgB,EADlB,OAEOI,oBAAS,GAFhB,mBAEVL,EAFU,KAEJiC,EAFI,KAajB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjC,KAAMA,EACNf,OAAQA,EACRgB,MAAOA,IAET,kBAAC,EAAD,CACEZ,MAAOA,EACPN,mBAlBa,SAACC,GAAD,OAAS,WAC1BkD,QAAQC,IAAI,eAEU,KAAlB9C,EAAML,GAAK,KACbgD,EAAYhD,GACZiD,GAAQ,MAcNhD,OAAQA,ME1BhBmD,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.37a221ec.chunk.js","sourcesContent":["\nexport const initialize = () => new Array(9).fill(['', 'black'])\n  \n","import styled from 'styled-components'\n\nexport const StyledGrid = styled.div`\n  min-width: 300px;\n  min-height: 300px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);   \n  grid-template-rows: repeat(3, 1fr);\n  grid-gap: 5px;\n  background-color: black;\n  overflow: hidden;\n`\n\n/*\nwidth: 400px;\n  height: 400px;\n\n\n*/","import styled from 'styled-components'\n\nexport const StyledSquare = styled.div`\n  width: auto;  \n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 5px;\n  background-color: rgba(245, 245, 245, 0.8);  \n  font-size: 3em;\n  color: ${props => props.color};\n  border: 5px solid;\n  border-bottom-color: rgba(245, 245, 245, 0.5);\n  border-right-color: rgba(245, 245, 245, 0.5);\n  border-top-color: rgba(245, 245, 245, 0.5);\n  border-left-color: rgba(245, 245, 245, 0.5);\n\n`\n","import React from 'react'\n\nimport { StyledSquare } from '../styles/StyledSquare'\n\n\nconst Square = (props) => {\n  const { cell, handlePlayerChoice, pos, winner } = props\n  // console.log('mark in square', mark)\n\n  return (\n    <StyledSquare    \n      onClick={winner !== 0 ? undefined : handlePlayerChoice(pos)}\n      color={cell[1]}    \n      >\n      {cell[0]}\n    </StyledSquare>\n  )\n}\n\nexport default Square","import React from 'react'\n\n\n// styles\nimport { StyledGrid } from '../styles/StyledGrid'\n\nimport Square from './Square'\n\nconst Stage = ({ stage, handlePlayerChoice, winner }) => {\n  \n  return (\n    <StyledGrid>\n      {\n        stage.map((cell, index) =>         \n            <Square\n              key={index}              \n              pos={index}\n              cell={cell}\n              handlePlayerChoice={handlePlayerChoice}\n              winner={winner}\n            />\n          )\n        }     \n    </StyledGrid>\n  )\n}\nexport default Stage","import styled from 'styled-components'\n\n\nexport const StyledDisplay = styled.div`\n  margin-top: 1em;\n  margin-bottom: 1em;\n  padding: 10px;\n  text-align: center;\n`\n\nexport const DisplayText = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n`\n\nexport const Button = styled.button`\n  visibility: ${props => props.visibility};  \n  border: none;\n  \n  margin-top: 10px;\n  text-decoration: none;\n  color: palevioletred;\n  background: none;\n  font-family: sans-serif;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  transition: color 250ms ease-in-out, transform 150ms ease;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n&:hover {\n    color: blueviolet;\n}\n\n`","import React from 'react'\n\nimport { StyledDisplay, DisplayText, Button } from '../styles/StyledDisplay'\n\nconst Display = ({ isOn, winner, reset }) => {\n\n  //console.log('winner ', winner)\n  let playText = ''\n  if (isOn) {\n    if (winner === 0) {\n      playText = <DisplayText>Your move</DisplayText>\n    } else {\n      if (winner === 1) {\n        playText = <DisplayText>You WON!!</DisplayText>\n      } else if (winner === 2) {\n        playText = <DisplayText>Computer WON!!</DisplayText>\n      } else if (winner === 3) {\n       playText = <DisplayText>DEUCE!!</DisplayText>\n      }\n    }\n  } else {   \n    playText = <DisplayText>Play Tic Tac Toe</DisplayText>\n  }\n\n  return (\n    <StyledDisplay>\n      {playText}      \n      <Button \n      visibility={ winner === 0 ? 'hidden' : 'undefined' }\n      onClick={reset()}\n      >\n        Play again?\n      </Button>\n    </StyledDisplay>\n  )\n}\n\nexport default Display","import styled from 'styled-components'\n\nconst GameWrapper = styled.div`\n margin: 0 auto;\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-top: 1rem;\n  padding-bottom: 3rem;\n  border-radius: 10px;\n  background-color: beige;\n  `\n\nexport default GameWrapper\n","import React, { useState } from 'react'\n\nimport { useStage } from '../hooks/useStage'\n\n// components\nimport Stage from './Stage'\nimport Display from './Display'\nimport GameWrapper from '../styles/GameWrapper'\n\nconst Game = () => {  \n  const [stage, updateStage, winner, reset] = useStage()\n  const [isOn, setIsOn] = useState(false)\n \n  const playerMove = (pos) => () => {\n    console.log('player move')\n    \n    if (stage[pos][0] === '') {\n      updateStage(pos)\n      setIsOn(true)\n    }\n  }\n\n  return (\n    <GameWrapper>\n      <Display\n        isOn={isOn}\n        winner={winner} \n        reset={reset}       \n      />\n      <Stage\n        stage={stage}\n        handlePlayerChoice={playerMove}\n        winner={winner}\n      />\n    </GameWrapper>\n  )\n}\n\nexport default Game\n\n","import { useState } from 'react'\n\nimport { initialize } from '../gameUtility'\n\nexport const useStage = () => {\n  const [stage, setStage] = useState(initialize())\n  const [winner, setWinner] = useState(0)\n\n  const updateStage = (pos) => {\n\n    let prevStage = [...stage]\n\n    prevStage[pos] = ['X', 'black']\n\n    if (availlableMoves(prevStage).length === 0) {\n      setWinner(3)\n    }\n\n    if (checkWinner(prevStage)) {\n      setWinner(1)\n      setStage(prevStage)\n      return\n    }\n\n    const aiStage = aiSelect(prevStage)\n\n    if (checkWinner(aiStage)) {\n      setWinner(2)\n    }\n\n    setStage(aiStage)\n  }\n\n  const reset = () => () => {\n    setStage(initialize())\n    setWinner(0)\n  }\n\n  const checkWinner = (prev) => {\n    for (let i = 0; i < combos.length; i++) {\n\n      const [one, two, three] = combos[i]\n\n      if (equals(prev[one][0], prev[two][0], prev[three][0])) {\n        // console.log('equals')\n\n        prev[one][1] = 'red'\n        prev[two][1] = 'red'\n        prev[three][1] = 'red'\n\n        return true\n      }\n    }\n  }\n\n  const availlableMoves = (stage) => {\n    let availlable = []\n    for (let i = 0; i < stage.length; i++) {\n      if (stage[i][0] === '') {\n        availlable.push(i)\n      }\n    }\n    return availlable\n  }\n\n  const equals = (a, b, c) => {\n\n    if (a !== '' && b !== '' && c !== '') {\n      if (a === b && b === c) {\n        return true\n      }\n    }\n  }\n\n  const aiSelect = (prev) => {\n\n    for (let i = 0; i < combos.length; i++) {\n      const [one, two, three] = combos[i]\n\n      if (prev[one][0] === '' || prev[two][0] === '' || prev[three][0] === '') {\n        if ((prev[one][0] === 'O' && prev[two][0] === 'O') ||\n          (prev[one][0] === 'O' && prev[three][0] === 'O') ||\n          (prev[two][0] === 'O' && prev[three][0] === 'O')) {\n          // console.log('pos combos', combos[i])\n\n          for (let ii = 0; ii < combos[i].length; ii++) {\n            const index = combos[i][ii]\n            if (prev[index][0] === '') {\n              prev[index] = ['O', 'black']\n              return prev\n            }\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < combos.length; i++) {\n      const [one, two, three] = combos[i]\n\n      if (prev[one][0] === '' || prev[two][0] === '' || prev[three][0] === '') {\n        if ((prev[one][0] === 'X' && prev[two][0] === 'X') ||\n          (prev[one][0] === 'X' && prev[three][0] === 'X') ||\n          (prev[two][0] === 'X' && prev[three][0] === 'X')) {\n\n          for (let ii = 0; ii < combos[i].length; ii++) {\n            const index = combos[i][ii]\n            if (prev[index][0] === '') {\n              prev[index] = ['O', 'black']\n              return prev\n            }\n          }\n        }\n      }\n    }\n\n    const possMoves = availlableMoves(prev)\n    const index = Math.floor(Math.random() * possMoves.length)\n\n    prev[possMoves[index]] = ['O', 'black']\n\n    return prev\n  }\n\n  const combos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [6, 4, 2]\n  ]\n\n  return [stage, updateStage, winner, reset]\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\n\nReactDOM.render(\n<Game />, \ndocument.getElementById('root'))\n"],"sourceRoot":""}